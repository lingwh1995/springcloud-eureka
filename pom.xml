<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.openatom</groupId>
    <artifactId>springcloud-eureka</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <!--公共API-->
        <module>springcloud-api-commons</module>

        <!--单节点版EUREKA注册中心-->
        <module>springcloud-register-center-single-node7001</module>
        <!--集群版EUREKA注册中心:7002节点-->
        <module>springcloud-register-center-cluster-node7002</module>
        <!--集群版EUREKA注册中心:7003节点-->
        <module>springcloud-register-center-cluster-node7003</module>
        <!--集群版EUREKA注册中心:7003节点-->
        <module>springcloud-register-center-cluster-node7004</module>

        <!--EUREKA版服务消费者:使用SpringCloud自带组件实现负载均衡-->
        <module>springcloud-consumer-loadbalance-default-order80</module>
        <!--EUREKA版服务消费者:1.使用Ribbon实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-hardcode-order80</module>
        <!--EUREKA版服务消费者:1.使用Ribbon实现负载均衡 2.yml文件配置方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-configuration-order80</module>
        <!--EUREKA版服务消费者:1.使用Ribbon的自定义负载均衡算法实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-custom-strategy-hardcode-order80</module>
        <!--EUREKA版服务消费者:1.使用Ribbon的自定义负载均衡算法实现负载均衡 2.yml文件配置方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-ribbon-custom-strategy-configuration-order80</module>
        <!--Eureka版服务消费者:1.使用OpenFeign实现负载均衡 2.YML配置方式实现负载均衡-->
        <module>springcloud-consumer-loadbalance-openfeign-configuration-order80</module>
        <!--Eureka版服务消费者:1.使用OpenFeign实现负载均衡 2.Java硬编码方式实现负载均衡算法替换-->
        <module>springcloud-consumer-loadbalance-openfeign-hardcode-order80</module>
        <!--Eureka版服务消费者:1.使用OpenFeign实现负载均衡 2.Java硬编码方式实现负载均衡算法替换 3.加入了Hystrix-->
        <module>springcloud-consumer-hystrix-loadbalance-openfeign-configuration-order80</module>
        <!--Eureka版服务消费者:1.使用OpenFeign实现负载均衡 2.使用了Apollo配置中心 -->
        <module>springcloud-config-apollo-loadbalance-openfeign-configuration-order80</module>
        <!--Eureka版服务消费者:1.使用SpringCloud默认负载均衡 2.使用了Sleuth和Zipkin -->
        <module>springcloud-consumer-sleuth_zipkin-loadbalance-default-order80</module>

        <!--EUREKA版服务提供者集群:服务提供者节点1-8001-->
        <module>springcloud-provider-cluster-node-payment8001</module>
        <!--EUREKA版服务提供者集群:服务提供者节点2-8002-->
        <module>springcloud-provider-cluster-node-payment8002</module>
        <!--EUREKA版服务提供者集群:服务提供者节点1(带有熔断机制)-8003-->
        <module>springcloud-provider-hystrix-cluster-node-payment8003</module>
        <!--EUREKA版服务提供者集群:服务提供者节点2(带有熔断机制)-8004-->
        <module>springcloud-provider-hystrix-cluster-node-payment8004</module>
        <!--EUREKA版服务提供者集群:服务提供者节点1-8005:1.默认负载均衡模式 2.使用了Sleuth和Zipkin-->
        <module>springcloud-provider-sleuth_zipkin-cluster-node-payment8005</module>
        <!--EUREKA版服务提供者集群:服务提供者节点1-8006:1.默认负载均衡模式 2.使用了Sleuth和Zipkin-->
        <module>springcloud-provider-sleuth_zipkin-cluster-node-payment8006</module>

        <!--SpringCloud服务降级、服务熔断监控:监控单节点版-->
        <module>springcloud-mointor-hystrix-dashboard9001</module>
        <!--SpringCloud服务降级、服务熔断监控:监控集群多节点版-->
        <module>springcloud-mointor-hystrix-dashboard-turbine9002</module>

        <!--SpringCloud网关:1.直连模式 2.YML文件配置-->
        <module>springcloud-router-connect-direct-configuration-gateway9527</module>
        <!--SpringCloud网关:1.负载均衡模式 2.Java硬编码-->
        <module>springcloud-router-connect-loadbalance-hardcode-gateway9527</module>
        <!--SpringCloud网关:1.直连模式 2.Java硬编码-->
        <module>springcloud-router-connect-direct-hardcode-gateway9527</module>
        <!--SpringCloud网关:1.负载均衡模式 2.YML文件配置-->
        <module>springcloud-router-connect-loadbalance-configuration-gateway9527</module>

        <module>springcloud-consumer-seata-loadbalance-openfeign-configuration-order80</module>
        <module>springcloud-provider-seata-account8007</module>
        <module>springcloud-provider-seata-storage8008</module>
        <module>springcloud-mointor-springboot-admin-server9003</module>
        <module>springcloud-basic-sample-register-center-single-node7005</module>
        <module>springcloud-basic-sample-consumer-loadbalance-openfeign-configuration-order80</module>
        <module>springcloud-basic-sample-provider-cluster-node-payment8009</module>
        <module>springcloud-basic-sample-provider-cluster-node-payment8010</module>
    </modules>

    <!-- 统一管理jar包版本 -->
    <properties>
        <!--依赖版本-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
        <mysql.connector.version>8.0.28</mysql.connector.version>
        <spring.boot.version>2.2.2.RELEASE</spring.boot.version>
        <druid.spring.boot.version>1.1.10</druid.spring.boot.version>
        <spring.cloud.version>Hoxton.SR1</spring.cloud.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
        <org.openatom.api.commons.version>1.0-SNAPSHOT</org.openatom.api.commons.version>
        <com.ctrip.framework.apollo.apollo-client.version>2.0.1</com.ctrip.framework.apollo.apollo-client.version>
        <io.seata.version>1.4.2</io.seata.version>
        <spring.cloud.alibaba.version>2.2.0.RELEASE</spring.cloud.alibaba.version>
        <net.logstash.logback.logstash-logback-encoder.version>5.2</net.logstash.logback.logstash-logback-encoder.version>
        <!--docker私服地址:端口-->
        <docker.registry>192.168.0.4:5000</docker.registry>
        <!--docker部署地址:端口-->
        <docker.dockerHost>tcp://192.168.0.4:2375</docker.dockerHost>
        <spring.boot.admin.version>2.2.1</spring.boot.admin.version>

        <!--插件版本-->
        <org.apache.maven.plugins.maven-resources-plugin.version>3.2.0</org.apache.maven.plugins.maven-resources-plugin.version>
        <io.fabric8.docker-maven-plugin.version>0.39.1</io.fabric8.docker-maven-plugin.version>
        <org.springframework.boot.spring-boot-maven-plugin.version>2.2.2.RELEASE</org.springframework.boot.spring-boot-maven-plugin.version>
    </properties>

    <!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  -->
    <dependencyManagement>
        <dependencies>
            <!--spring boot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 2.1.0.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.connector.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!--定义公共的工程版本-->
            <dependency>
                <groupId>org.openatom</groupId>
                <artifactId>springcloud-api-commons</artifactId>
                <version>${org.openatom.api.commons.version}</version>
            </dependency>
            <!--Apollo客户端-->
            <dependency>
                <groupId>com.ctrip.framework.apollo</groupId>
                <artifactId>apollo-client</artifactId>
                <version>${com.ctrip.framework.apollo.apollo-client.version}</version>
            </dependency>
            <!--Seata客户端-->
            <dependency>
                <groupId>io.seata</groupId>
                <artifactId>seata-spring-boot-starter</artifactId>
                <version>${io.seata.version}</version>
            </dependency>
            <!--springboot admin server端-->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-server</artifactId>
                <version>${spring.boot.admin.version}</version>
            </dependency>
            <!--springboot admin client端-->
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-starter-client</artifactId>
                <version>${spring.boot.admin.version}</version>
            </dependency>
            <!--logstah-->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${net.logstash.logback.logstash-logback-encoder.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--定义三种开发环境-->
    <profiles>
        <profile>
            <!--不同环境的唯一id-->
            <id>dev</id>
            <properties>
                <!--profile.active对应application.yml中的@profile.active@-->
                <profile.active>dev</profile.active>
            </properties>
            <activation>
                <!--默认激活开发环境-->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>

        <!--测试环境-->
        <profile>
            <id>test</id>
            <properties>
                <profile.active>test</profile.active>
            </properties>
        </profile>

        <!--生产环境-->
        <profile>
            <id>prod</id>
            <properties>
                <profile.active>prod</profile.active>
            </properties>
        </profile>
    </profiles>

    <!--热部署需要加这个-->
    <build>
        <!--在这里统一插件版本-->
        <plugins>
            <!--支持yaml读取pom的参数-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${org.apache.maven.plugins.maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${io.fabric8.docker-maven-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${org.springframework.boot.spring-boot-maven-plugin.version}</version>
            </plugin>
        </plugins>
        <!--打包多环境-->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/*.yml</exclude>
                    <exclude>**/*.xml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources/${profile.active}</directory>
                <!--引入所需环境的配置文件-->
                <filtering>true</filtering>
                <includes>
                    <include>bootstrap.yml</include>
                    <!--根据maven选择环境导入配置文件-->
                    <include>application-${profile.active}.yml</include>
                    <include>mapper/*.xml</include>
                    <include>*.xml</include>
                </includes>
            </resource>
        </resources>

    </build>
</project>