<?xml version="1.0" encoding="UTF-8"?>

<!--
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<!-- 输出logback内部日志信息，每隔30s判断一下配置文件有没有更新，若更新，则重新加载 -->
<configuration scan="true" scanPeriod="30 seconds" debug="false">

    <!--从Spring容器中获取配置(Spring配置文件加载顺序:bootstrap.yml->logback.xml->application.yml)-->
    <!--应用名称-->
    <springProperty name="LOG_NAME" scope="context" source="application.logging.log-name"/>
    <!--日志输出级别-->
    <springProperty name="LOG_LEVEL" scope="context" source="application.logging.level"/>
    <!--是否启用append-->
    <springProperty name="IS_APPEND" scope="context" source="application.logging.append"/>
    <!--是否启用立即刷新-->
    <springProperty name="IS_IMMEDIATEFLUSH" scope="context" source="application.logging.immediate-flush"/>
    <!-- 定义日志文件存储位置-->
    <springProperty name="LOG_LOCATION_PREFIX" scope="context" source="application.logging.log-location-prefix"/>

    <!-- name：变量的名称，可以随意起名，但建议名字要简明直译；value:变量的值；在配置文件中，我们可以用 ${} 的方式来使用，将变量引入到其他节点中去。-->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
    <!--控制台日志输出预选样式-->
    <property name="CONSOLE_LOG_PATTERN_1" value="%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}): %cyan(%msg%n)"/>
    <property name="CONSOLE_LOG_PATTERN_2" value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) %highlight([%-5level]) %green(%logger) %msg%n"/>
    <property name="CONSOLE_LOG_PATTERN_3" value="%date{yyyy-MM-dd HH:mm:ss}  %green(%-5level) %boldMagenta(${PID:-}) -- [%+20thread] %cyan(%logger{20}) %line       : %msg%n"/>
    <!--文件中日志输出预选样式-->
    <property name="FILE_LOG_PATTERN_1" value="%d{yyyyMMdd:HH:mm:ss.SSS} [%thread] %-5level  %msg%n"/>
    <property name="FILE_LOG_PATTERN_2" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %t %file:%line %X{traceId} -| %m%n"/>

    <!--控制台日志输出格式-->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN_3}"/>
    <!--文件中日志输出格式-->
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN_1}"/>
    <!--日志名称-->
    <!--定义默认日志输出级别-->
    <property name="LOG_OUTPUT_LEVEL" value="${LOG_LEVEL}" />
    <!--定义默认日志输出编码-->
    <property name="ENCODING" value="UTF-8" />

    <!-- 控制台输出:开始 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 用来设置日志的输入格式，使用“%+转换符”的方式，如果要输出”%”则必须使用”\”进行转义。-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：https://logback.qos.ch/manual/layouts.html
                 %d 表示日期，
                 %thread 表示线程名，
                 %level 日志级别从左显示5个字符宽度，
                 %t 线程名
                 %file:%line 文件名+行号，
                 %m 日志消息，%n是换行符
                 %X{traceId}:自定义设置的参数，后面会说。
            -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>
    <!-- 控制台输出:结束 -->

    <!--输出到文件:开始-->
    <!-- 将项目本次运行INFO日志同步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="APPENDER-FILEAPPENDER-INFO" class="ch.qos.logback.core.FileAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!-- 写入的日志文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在则自动创建 -->
        <file>${LOG_LOCATION_PREFIX}${LOG_NAME}-info.log</file>
        <!-- 如果为true表示日志被追加到文件结尾，如果是false表示清空文件 -->
        <append>${IS_APPEND}</append>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>${IS_IMMEDIATEFLUSH}</immediateFlush>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 将项目本次运行INFO日志异步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="ASYNC-APPENDER-FILEAPPENDER-INFO" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-FILEAPPENDER-INFO" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>${IS_IMMEDIATEFLUSH}</neverBlock>
    </appender>

    <!-- 将项目本次运行DEBUG日志同步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="APPENDER-FILEAPPENDER-DEBUG" class="ch.qos.logback.core.FileAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 写入的日志文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在则自动创建 -->
        <file>${LOG_LOCATION_PREFIX}/${LOG_NAME}-debug.log</file>
        <!-- 如果为true表示日志被追加到文件结尾，如果是false表示清空文件 -->
        <append>${IS_APPEND}</append>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>true</immediateFlush>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 将项目本次运行DEBUG日志异步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="ASYNC-APPENDER-FILEAPPENDER-DEBUG" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-FILEAPPENDER-DEBUG" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 将项目本次运行ERROR日志同步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="APPENDER-FILEAPPENDER-ERROR" class="ch.qos.logback.core.FileAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 写入的日志文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在则自动创建 -->
        <file>${LOG_LOCATION_PREFIX}/${LOG_NAME}-error.log</file>
        <!-- 如果为true表示日志被追加到文件结尾，如果是false表示清空文件 -->
        <append>${IS_APPEND}</append>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>${IS_IMMEDIATEFLUSH}</immediateFlush>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 将项目本次运行ERROR日志异步输出到文件,会自动清空文件中上一次的日志 -->
    <appender name="ASYNC-APPENDER-FILEAPPENDER-ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-FILEAPPENDER-ERROR" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>
    <!--输出到文件:结束-->


    <!--滚动输出到文件(按照天保存):开始-->
    <!-- 将项目本次运行INFO日志同步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="APPENDER-ROLLINGFILEAPPENDER-INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>false</immediateFlush>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名:
                %d:可以包含一个Java.text.SimpleDateFormat指定的时间格式
                %i:自增数字
            -->
            <fileNamePattern>${LOG_LOCATION_PREFIX}/HISTORY/${LOG_NAME}-info-%d{yyyy-MM-dd}-index%i.log</fileNamePattern>
            <!-- 日志文件保存历史数量:控制保留的归档文件的最大数量，如果超出数量就删除旧文件 -->
            <maxHistory>10</maxHistory>
            <!-- 文件大小超过100MB归档 -->
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 将项目本次运行INFO日志异步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="ASYNC-APPENDER-ROLLINGFILEAPPENDER-INFO" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-ROLLINGFILEAPPENDER-INFO" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 将项目本次运行DEBUG日志同步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="APPENDER-ROLLINGFILEAPPENDER-DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>false</immediateFlush>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名:
                %d:可以包含一个Java.text.SimpleDateFormat指定的时间格式
                %i:自增数字
            -->
            <fileNamePattern>${LOG_LOCATION_PREFIX}/HISTORY/${LOG_NAME}-debug-%d{yyyy-MM-dd}-index%i.log</fileNamePattern>
            <!-- 日志文件保存历史数量:控制保留的归档文件的最大数量，如果超出数量就删除旧文件 -->
            <maxHistory>10</maxHistory>
            <!-- 文件大小超过100MB归档 -->
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 将项目本次运行DEBUG日志异步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="ASYNC-APPENDER-ROLLINGFILEAPPENDER-DEBUG" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-ROLLINGFILEAPPENDER-DEBUG" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>

    <!-- 将项目本次运行ERROR日志同步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="APPENDER-ROLLINGFILEAPPENDER-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--立即刷新，设置成false可以提高日志吞吐量-->
        <immediateFlush>false</immediateFlush>
        <!-- 每天生成一个日志文件，保存30天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名:按天回滚 daily -->
            <fileNamePattern>${LOG_LOCATION_PREFIX}/HISTORY/${LOG_NAME}-error-%d{yyyy-MM-dd}-index%i.log</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>10</maxHistory>
            <!-- 文件大小超过100MB归档 -->
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="ASYNC-APPENDER-ROLLINGFILEAPPENDER-ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-ROLLINGFILEAPPENDER-ERROR" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>
    <!--滚动输出到文件(按照天保存):结束-->

    <!--输出到LOGSTASH:开始-->
    <!-- 将项目本次运行ERROR日志同步输出到文件,按照每天生成日志文件,会自动拼接上一次日志 -->
    <appender name="APPENDER-LOGSTASH-ERROR" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <!-- 过滤器，只记录 info 级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <!--  logstash服务器地址-->
        <destination>192.168.0.4:5044</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"applicationName":"${LOG_NAME}"}</customFields>
        </encoder>
    </appender>
    <appender name="ASYNC-APPENDER-LOGSTASH-ERROR" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="APPENDER-LOGSTASH-ERROR" />
        <!-- 设置异步阻塞队列的大小，为了不丢失日志建议设置的大一些，单机压测时100000是没问题的，应该不用担心OOM -->
        <queueSize>10000</queueSize>
        <!-- 设置丢弃DEBUG、TRACE、INFO日志的阀值，不丢失 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 设置队列入队时非阻塞，当队列满时会直接丢弃日志，但是对性能提升极大 -->
        <neverBlock>true</neverBlock>
    </appender>
    <!--输出到logstash:结束-->

    <!--
        开发环境日志级别为DEBUG
        level：用来设置打印级别
        五个常用打印级别从低至高依次为TRACE、DEBUG、INFO、WARN、ERROR
    -->
    <springProfile name="dev">
        <root level="${LOG_OUTPUT_LEVEL}">
            <!--输出到控制台-->
            <appender-ref ref="STDOUT"/>
            <!--异步非滚动输出到文件-->
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-INFO"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-DEBUG"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-ERROR"/>
            <!--异步滚动输出到文件:dev环境不开启-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-INFO"/>-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-DEBUG"/>-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-ERROR"/>-->
            <appender-ref ref="ASYNC-APPENDER-LOGSTASH-ERROR"/>
        </root>
    </springProfile>

    <!-- 测试环境日志级别为INFO -->
    <springProfile name="test">
        <root level="${LOG_OUTPUT_LEVEL}">
            <!--输出到控制台-->
            <appender-ref ref="STDOUT"/>
            <!--异步非滚动输出到文件-->
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-INFO"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-DEBUG"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-ERROR"/>
            <!--异步滚动输出到文件:test环境不开启-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-INFO"/>-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-DEBUG"/>-->
<!--            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-ERROR"/>-->
        </root>
    </springProfile>

    <!-- 生产环境日志级别为INFO -->
    <springProfile name="prod">
        <root level="${LOG_OUTPUT_LEVEL}">
            <!--输出到控制台-->
            <appender-ref ref="STDOUT"/>
            <!--异步非滚动输出到文件-->
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-INFO"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-DEBUG"/>
            <appender-ref ref="ASYNC-APPENDER-FILEAPPENDER-ERROR"/>
            <!--异步滚动输出到文件-->
            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-INFO"/>
            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-DEBUG"/>
            <appender-ref ref="ASYNC-APPENDER-ROLLINGFILEAPPENDER-ERROR"/>
        </root>
    </springProfile>
</configuration>
