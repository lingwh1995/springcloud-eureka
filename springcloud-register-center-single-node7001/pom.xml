<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>springcloud-eureka</artifactId>
        <groupId>org.openatom</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>springcloud-register-center-single-node7001</artifactId>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
        <!--引入公共的工程-->
        <dependency>
            <groupId>org.openatom</groupId>
            <artifactId>springcloud-api-commons</artifactId>
        </dependency>
    </dependencies>
    <!--热部署需要加这个-->
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.39.1</version>
                <configuration>
                    <dockerHost>tcp://192.168.0.4:2375</dockerHost>
                    <!--认证配置,用于私有registry认证-->
                    <!--                    <authConfig>-->
                    <!--                        <username>admin</username>-->
                    <!--                        <password>xxxxx</password>-->
                    <!--                    </authConfig>-->
                    <!-- harbor镜像仓库地址-->
                    <!--                    <pushRegistry>http://${docker.registry}</pushRegistry>-->
                    <!--                    <pushRegistry>http://192.168.0.4:5000</pushRegistry>-->
                    <images>
                        <image>
                            <!--显示日志的时候-->
                            <!--<alias>spring-cloud-eureka</alias>-->
                            <!--如果只给docker本地镜像库中推送,格式为 命名空间/项目名称:tags名称,示例:项目artifactId/模块artifactId:模块version-->
                            <!--<name>${project.parent.artifactId}/${project.name}:${project.version}</name>-->
                            <!--如果要同时给私服中推送,格式为 registry的ip:命名空间/项目名称:tags名称,示例:私服的ip:项目artifactId/模块artifactId:模块version-->
                            <name>192.168.0.4:5000/${project.parent.artifactId}/${project.name}:${project.version}</name>
                            <!--定义镜像构建行为-->
                            <build>
                                <!-- 指定dockerfile文件的位置-->
                                <dockerFile>${project.basedir}/docker/Dockerfile</dockerFile>
                            </build>

                            <!-- 定义容器启动行为-->
                            <run>
                                <!--设置容器名，可采用通配符-->
                                <containerNamePattern>${project.parent.artifactId}_${project.build.finalName}</containerNamePattern>
                                <!--设置端口映射-->
                                <ports>
                                    <port>7001:7001</port>
                                </ports>
                            </run>
                        </image>
                    </images>
                    <buildArgs>
                        <!--Jar包在项目中的生成位置-->
                        <LOCALHOST_JAR_FILE_DIR>${project.build.finalName}.jar</LOCALHOST_JAR_FILE_DIR>
                        <!--把项目拷贝到Docker容器中的位置-->
                        <REMOTE_JAR_FILE_DIR>/${project.parent.artifactId}/${project.build.finalName}.jar</REMOTE_JAR_FILE_DIR>
                    </buildArgs>
                </configuration>
                <executions>
                    <!--如果想在项目打包时构建镜像添加-->
                    <execution>
                        <id>execution-package</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--执行maven命令时执行复制操作-->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <!-- 这是将当前模块下的target下的jar包copy到当前模块根目录下docker目录中。。-->
                                <copy todir="docker" file="target/${build.finalName}.jar"></copy>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>